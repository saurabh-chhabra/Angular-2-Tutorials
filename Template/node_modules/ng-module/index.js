var fs = require('fs');

const PATH = require('path');
const DS = PATH.sep;
const ROOT = "ng-module"+DS;
const ROOT_TEMPLATE = ROOT+"template"+DS;
const APP = process.argv.length >3? process.argv[3]+DS: "app"+DS

//  Check if parameter "name" is specified:
    if (process.argv.length <3 ){
        console.log("Define <name>: node ng-module <name>");
        return;
    }

//  Create name replacements:
    var name = process.argv[2].toLowerCase();

    var arName = name.split('-');
    var name_cc  = "";
    var name_Ncc = "";

    for (var i = 0; i < arName.length; i++) {
      name_cc  +=  i>0? arName[i].charAt(0).toUpperCase() + arName[i].slice(1) : arName[i];
      name_Ncc +=  arName[i].charAt(0).toUpperCase() + arName[i].slice(1);
    }

    var replacements = {
      "name":     name,
      "name_cc":  name_cc,
      "name_Ncc": name_Ncc
    };

//  Process templates:
    fs.readdir(ROOT_TEMPLATE, (err, files) => {
      if (err) { console.log(err); return;}
      fs.mkdir(APP+name, (err) =>{
        if (err) { console.log(err); return;}
        files.forEach(file => {

          fs.readFile(ROOT_TEMPLATE+file,"utf-8", (err,template)=>{
            if (err) { console.log(err); return;}
            fs.open(APP+name+DS+name+'.'+file,'w', function(err, fd){
                if (err) { console.log(err); return;}

            //  Replacements:
                for (var key in replacements ){
                  var tag = '<%'+key+'%>';
                  var replacement = replacements[key];
                  template = template.split(tag).join(replacement);
                }

                fs.write(fd,template);
             });
          });
        });
      });
    });
